#!/bin/bash

VERSION="0.2.0"

ANSIBLE_NOCOWS=1
SCRIPT_DIR=./bin
OUTPUT=/dev/stderr
DEBUG_OUTPUT=/dev/null
INVENTORY_FILE=
DEBUG=
DIR=

usage()
{
    cat <<EOF
Usage:

  ansup [-d] [-h] [-s] [-v] [-i INVENTORY] DIR

Starts a program that listens for directives on standard input. When it
receives any then executes appropriate ansible playbook from specified
directory DIR.

Options:

  -d            Debug mode. Can be used twice for more verbose output..
  -h            Display this help dialog.
  -i INVENTORY  Ansible inventory file that should be used.
  -s            Silent mode.
  -v            Print current version.

For more information check 'man ansup'.
EOF
}

log()
{
    echo "$@" >$OUTPUT
}

debug()
{
    echo "$@" >$DEBUG_OUTPUT
}

version()
{
    echo $VERSION >&1
}

init()
{
    while getopts "dhi:sv" OPTION; do
        case $OPTION in
            h)
                usage
                exit 0
                ;;
            v)
                version
                exit 0
                ;;
            i)
                INVENTORY_FILE="$OPTARG"
                debug "DEBUG -- using inventory at: $INVENTORY_FILE"
                ;;
            d)
                if [[ $DEBUG != "" ]]; then
                    set -x
                    continue
                fi

                DEBUG=' -v'
                DEBUG_OUTPUT=/dev/stderr
                debug "DEBUG -- debug mode enabled" >&2
                ;;
            s)
                OUTPUT=/dev/null
                ;;
            ?|*)
                usage
                exit 1
        esac
    done

    shift $(($OPTIND - 1))

    case $# in
        1)
            DIR=$1
            debug "DEBUG -- playbooks directory set to: $DIR"
            ;;
        0)
            log "ERROR -- missing directory"
            exit 1
            ;;
        *)
            log "ERROR -- invalid number of arguments"
            exit 1
            ;;
    esac
}

whereami()
{
    path="${BASH_SOURCE[0]}";

    if [[ -h "$path" ]]; then
        while [ -h "$path" ]; do
            script_path=$(readlink "$path")
        done
    fi

    echo $(dirname "$path"})
}

run_playbook()
{
    id="$1"
    play="$DIR/$2.yml"
    params="$3"
    inventory=

    if [[ "$INVENTORY_FILE" != "" ]]; then
        if [[ ! -f "$INVENTORY_FILE" ]]; then
            log "ERROR -- inventory file not found: $INVENTORY_FILE"
            return 1
        fi

        inventory=" -i $INVENTORY_FILE"
    fi

    if [[ ! -f "$play" ]]; then
        log "ERROR -- no such playbook: $play"
        return 1
    fi

    debug "INFO -- [$id] performing play '$action' with arguments: $params"
    ansible-playbook$DEBUG$inventory -c local -e "$params" "$play" 2>&1

    if (( $? != 0 )); then
        log "ERROR -- play $action:$id has failed"
        return 1
    fi

    log "INFO -- play $action:$id finished successfully"
    return 0
}

main()
{
    SCRIPT_DIR=$(whereami)

    debug "DEBUG -- started in: $SCRIPT_DIR"
    debug "DEBUG -- using playbooks from: $DIR"

    while read action params; do
        if [[ $action == "" ]]; then
            log "ERROR -- empty action received"
            continue
        fi

        id=$(echo $(od -vAn -N4 -tu4 </dev/urandom))
        run_playbook "$id" "$action" "$params"
    done
}

init "$@" && main
